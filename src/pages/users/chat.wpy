<template>
  <view style="height: 100vh;overflow: hidden;background: #f5f5f5;">
    <scroll-view scroll-top="{{blessingTopHandle}}" scroll-into-view="{{toView}}" scroll-anchoring="{{true}}" refresher-enabled="{{true}}" refresher-triggered="{{triggeredsBlessing}}" bindrefresherpulling="onPullingsBlessing" bindrefresherrefresh="onRefreshsBlessing" scroll-y="true" style="-webkit-overflow-scrolling: touch;height: 100%;" lower-threshold="0">
     <view class="m_tips f-fbc">
       <view class="font_26"  style="color: #FBB040;">如遇营销，涉黄等骚扰情况</view>
       <image class="report_icon" @tap="complaint" src="https://image.fulllinkai.com/202112/21/104374082c9e2bd160ee963b4f29c98f.png" mode="aspectFill"></image>
     </view>
      <view class="m_chat_box">
        <view class="chat_box" id="m_curr">
          <view class="" wx:for="{{list}}" wx:key="index" id="chat_{{item.id}}">
            <view wx:if="{{item.identity != 'other_user'}}" class="clearfix message-box">
              <view class="chat_time font_24 color-999 text-center">{{item.updated_at}}</view>
              <image class="right-Avatar" src="{{item.user_pic}}" mode="aspectFill"></image>
              <view class="right-message" wx:if="{{item.type == 'chat'}}">
                {{item.content}}
              </view>
              <view class="right-voice f-fcc" @tap="playMethod({{item.content}})" wx:elif="{{item.type == 'voice'}}">
                <view class="font333" style="padding-right: 30rpx;">{{playShow?item.duration:recordingTimeqwe}}S"</view>
                <view class="wifi-symbol">
                    <view class="wifi-circle first"></view>
                    <view class="wifi-circle second {{playShow?'':'sel'}}"></view>
                    <view class="wifi-circle third {{playShow?'':'sel'}}"></view>
                </view>
              </view>
              <view class="right-video" wx:else>
                <video class="u_video" src="{{item.content}}"></video>
              </view>
            </view>
            <view wx:else class="clearfix message-box">
              <view class="chat_time font_24 color-999 text-center">{{item.updated_at}}</view>
              <image class="left-Avatar" src="{{item.user_pic}}" mode="aspectFill"></image>
              <view class="left-message" wx:if="{{item.type == 'chat'}}">
                {{item.content}}
              </view>
              <view class="left-voice f-fcc" @tap="playMethod({{item.content}})" wx:elif="{{item.type == 'voice'}}">
                <view class="wifi-symbol">
                    <view class="wifi-circle first"></view>
                    <view class="wifi-circle second {{playShow?'':'sel'}}"></view>
                    <view class="wifi-circle third {{playShow?'':'sel'}}"></view>
                </view>
                <view class="font333" style="padding-left: 30rpx;">{{playShow?item.duration:recordingTimeqwe}}S"</view>
              </view>
              <view class="left-video" @tap="gotoTv({{item}})" wx:else>
                <video class="u_video" id="video_{{item.id}}" bindfullscreenchange="leaveVideo" src="{{item.content}}"></video>
              </view>
            </view>
          </view>
        </view>
      </view>
    </scroll-view>
    <view class="m_inp">
      <view class="u_inp f-fcc">
        <input class="u_field" cursor-spacing="30rpx" type='text' confirm-type="send"  @confirm="postBottleChat" bindinput="sendMessage" value="{{chatValue}}" placeholder="回复{{nickname}}" />
        <view class="u_inp_bu" @tap="postBottleChat">发送</view>
      </view>
    </view>
		<!-- 投诉 -->
		<view class="cu-modal {{modalName=='complaintModal'?'show':''}}" bindtap="hideModal">
		  <view class="perfect_data_box animation-slide-top" catchtap>
		    <view class="m_comp_con">
          <image class="u_comp_icon" @tap.stop="hideModal" src="https://image.fulllinkai.com/202112/23/adc5c39ca19d2a9783be172f606b9498.png" mode="widthFix"></image>
		      <view class="m_comp_tt font_32 color333 bold">举报</view>
					<view class="m_comp">
						<view class="font_30 color333 bold text-left">举报类型</view>
						<view class="m_comp_type f-fc f-wrap">
							<block  wx:for="{{compType}}" wx:key="index">
								<view class="u_comp_type f-fcc font_28 {{item.choiceTips?'sel':''}}" @tap="choiceType({{index}})">{{item.name}}</view>
							</block>
						</view>
					</view>
		      <view class="m_texTarea">
		        <compTexTarea
		          :placeholderText.sync="compPlaceholderText"
		          :max.sync="max"
		          :value.sync="compValue"
							@textareaValue.user="compTextareaValue"
             :readonly="false"
		        ></compTexTarea>
		      </view>
		      <view class="m_ble_bu f-fcc">
		        <view class="u_ble_bu bold fong_30 f-fcc" @tap="Submit">提交</view>
		      </view>
		    </view>
		  </view>
		</view>
  </view>
</template>

<script>
import wepy from 'wepy'
import { service } from '../../config.js'
import http from '../../mixins/http'
import base from '../../mixins/base'
import user from '../../mixins/user'
import texTarea from '../../components/textarea'
import backgroundAudio from '../../components/backgroundAudio'

export default class chat extends wepy.page {
  mixins = [base, http, user]
  components = {compTexTarea: texTarea, backgroundAudio};
  config = {
    navigationBarTitleText: '聊天',
    enablePullDownRefresh: false
  }
  data = {
    list: [],
    blessingPage: 1,
    onToupperShow: false,
    chatValue: '',
    blessingTopHandle: -1,
    triggeredsBlessing: false,
    modalName: '',
    compType: [
      {
        name: '政治敏感',
        choiceTips: false
      },
      {
        name: '色情低俗',
        choiceTips: false
      },
      {
        name: '广告软文',
        choiceTips: false
      },
      {
        name: '内容引起不适',
        choiceTips: false
      }
    ],
    compValue: '',
    setIntervalList: null,
    b_id: '',
    nickname: '',
    toView: 'chat_',
    pushUpShow: false,
    playShow: true,
    recordingTimeqwe: 0,
    voiceDuration: 0,
    videoContext: null
  }

  computed = {}

  async onLoad (e) {
    this.nickname = e.nickname
    this.id = e.receiving_id
    this.b_id = e.b_id
    wx.setNavigationBarTitle({
      title: e.nickname
    })
    if (wepy.$instance.globalData.openid) {
      this.setIntervalCatch()
      this.getList()
    }else { 
      wepy.$instance.userInfoReadyCallback = res => {
        this.setIntervalCatch()
        this.getList()
      }
    }
  }

  onShow () {
    let that = this
    that.$parent.getTracker(this.$root.$name, this.config.navigationBarTitleText)
  }

  getList() {
    let vm = this
    this.$get({
      url: `${service.bottleRecord}/${vm.id}`,
      data: {
        page: vm.blessingPage
      }
    }, {
      success: ({code, data}) => {
        vm.blessingMessage = false
        if (vm.blessingPage == 1) {
          vm.list = [...vm.list, ...data.data]
          vm.$apply()
          if (vm.list.length == 0) {
            vm.showNoData = false
            vm.$apply()
          } else {
            setTimeout(() => {
              const {id} = vm.list[0]
              vm.toView = `chat_${id}`
              vm.$apply()
            }, 100)
            vm.showNoData = true
            vm.$apply()
          }
        } else {
          data.data.map(function (item, index) {
            vm.list.push(item)
            vm.$apply()
          })
        }
        vm.triggeredsBlessing = false
        vm.$apply()
      },
      fail: ({code, data}) => {
        // 失败了什么也不做
      },
      complete: () => {
        vm.loading = false
      }
    })
  }

  getArrDifference(arr1, arr2) {
    return arr1.concat(arr2).filter(function(item1) {
      return arr2.every(function(item2) {
        return item2.id == item1.id
      })
    })
  }

  getListNew(id) {
    const vm = this
    wx.hideNavigationBarLoading()
    var data = {
      id: id,
      receiving_id: vm.id
    }
    this.$get({
      url: `${service.bottleLatestData}`,
      data
    }, {
      success: ({code, data}) => {
        if (data.length > 0) {
          let tempResArr = vm.getArrDifference(vm.list, data)
          console.log(tempResArr, 'tempResArr---------------')
          if (tempResArr && tempResArr.length > 0) {
            // tempResArr.forEach(item => {
            //   item.created_at = formatDate(item.created_at, 1)
            // })
            vm.list = [...tempResArr, ...vm.list]
            const {id} = tempResArr[0]
            this.toView = `chat_${id}`
            this.$apply()
          }
        }
      }
    })
  }

  onPullDownRefresh () {
  }

  onRefresh() {
    // this.$invoke('DropDownMenu', 'hideModal')
    this.blessingPage++
    this.getList()
  }

  // 下一页
  onToupper() {
    let that = this
    let cont = []
    let dataArr = []
    that.onToupperShow = true
  }

  onUnload () {
    let that = this
    clearInterval(that.Loadingtime)
    clearTimeout(that.setIntervalList)
    this.$invoke('backgroundAudio', 'endedVoice')
  }

  save() {
    let vm = this
    if (vm.coin < 100) {
      vm.modalName = 'insufficientModal'
      vm.$apply()
      return
    }
    vm.$post({url: `${service.host}/exchange/with/coin`}, {
      success: ({code, data}) => {
        vm.modalName = ''
        vm.$Toast_success('解锁成功')
        vm.$apply()
      }
    })
  }

  // 显示时间
  showTme (startTime, endTime) {
    let dateEnd = new Date(startTime.replace(/-/g, '/'))
    let dateBegin = new Date(endTime.replace(/-/g, '/'))
    var retValue = {}
    var date3 = dateEnd.getTime() - dateBegin.getTime()  // 时间差的毫秒数
    // 计算出相差天数
    var days = Math.floor(date3 / (24 * 3600 * 1000))
    retValue.Days = days
    var years = Math.floor(days / 365)
    retValue.Years = years
    var months = Math.floor(days / 30)
    retValue.Months = months
    // 计算出小时数
    var leave1 = date3 % (24 * 3600 * 1000)    // 计算天数后剩余的毫秒数
    var hours = Math.floor(leave1 / (3600 * 1000))
    retValue.Hours = hours
    // 计算相差分钟数
    var leave2 = leave1 % (3600 * 1000)        // 计算小时数后剩余的毫秒数
    var minutes = Math.floor(leave2 / (60 * 1000))
    retValue.Minutes = minutes
    // 计算相差秒数
    var leave3 = leave2 % (60 * 1000)      // 计算分钟数后剩余的毫秒数
    var seconds = Math.round(leave3 / 1000)
    retValue.Seconds = seconds
    var strTime = ''
    if (years >= 1) {
      strTime = years + '年前'
    } else if (months >= 1) {
      strTime = months + '个月前'
    } else if (days >= 1) {
      strTime = days + '天前'
    } else if (hours >= 1) {
      strTime = hours + '小时前'
    } else {
      strTime = minutes + '分钟前'
    }
    retValue.PubTime = strTime
    if (minutes < 5) {
      return false
    } else {
      return true
    }
  }

  // 转换时间
  getTime (time) {
    // 时间统一函数
    function getTimeText (argument) {
      var timeS = argument
      var todayT = ''
      var yestodayT = ''
      var timeCha = getTimeS(timeS)
      timeS = timeS.slice(-8)
      todayT = new Date().getHours() * 60 * 60 * 1000 + new Date().getMinutes() * 60 * 1000 + new Date().getSeconds() * 1000
      yestodayT = todayT + 24 * 60 * 60 * 1000
      const date = new Date()
      var year = date.getFullYear()
      var yea = Number(argument.slice(0, 4))
      if (timeCha > yestodayT) {
        if (yea == year) {
          return argument.slice(5, 11) + (timeS.slice(0, 2) >= 12 ? '下午' + (timeS.slice(0, 2) == 12 ? 12 : timeS.slice(0, 2) - 12) + timeS.slice(2, 5) : '上午' + timeS.slice(0, 5))
        } else {
          return timeS.slice(0, 2) >= 12 ? '下午' + (timeS.slice(0, 2) == 12 ? 12 : timeS.slice(0, 2) - 12) + timeS.slice(2, 5) : '上午' + timeS.slice(0, 5)
        }
      }
      if (timeCha > todayT && timeCha < yestodayT) {
        return timeS.slice(0, 2) > 12 ? '昨天 下午' + (timeS.slice(0, 2) == 12 ? 12 : timeS.slice(0, 2) - 12) + timeS.slice(2, 5) : '昨天 上午' + timeS.slice(0, 5)
      }
      if (timeCha < todayT) {
        return timeS.slice(0, 2) >= 12 ? '下午' + (timeS.slice(0, 2) == 12 ? 12 : timeS.slice(0, 2) - 12) + timeS.slice(2, 5) : '上午' + timeS.slice(0, 5)
      }
    }

// 时间戳获取
    function getTimeS (argument) {
      var timeS = argument
      timeS = timeS.replace(/[-]/g, '/').replace(/[-]/, '')
      timeS = timeS.replace(/[年月]/g, '/').replace(/[日]/, '')
      return new Date().getTime() - new Date(timeS).getTime() - 1000 // 有一秒的误差
    }
    var timeText = getTimeText(time)
    return timeText
  }

  setIntervalCatch() {
    const vm = this
    clearTimeout(vm.setIntervalList)
    vm.setIntervalList = setInterval(function() {
      vm.getListNew(vm.list[0].id)
    }, 5000)
  }

  Submit() {
      const vm = this
      const compTypeArr = []
      this.compType.forEach(item => {
        if (item.choiceTips) {
          compTypeArr.push(item.name)
        }
      })
      if (compTypeArr.length == 0) {
        this.$showToast('请选择举报内容')
        return
      }
      vm.complaintModal = false
      var data = {
        type: compTypeArr,
        content: this.compValue
      }
      vm.$post({url: `${service.host}/official/complaint/bless/${this.b_id}`, data}, {
        success: ({code, data}) => {
          vm.modalName = ''
          vm.$showToast('举报成功')
          vm.$apply()
        }
      })
    }

  methods = {
    compTextareaValue(e) {
      this.compValue = e
    },
    onPullingsBlessing(e) {
      this.triggeredsBlessing = true
    },
    onRefreshsBlessing(e) {
      this.blessingMessage = false
      this.blessingPage++
      this.getList()
    },
    blessingToReturnTop(e) {
      this.blessingTopHandle = Math.random()
      this.blessingTatus = false
      this.$apply()
    },
    hideModal () {
      this.modalName = ''
      this.$apply()
    },
    onPullings(e) {
      this.triggeredShow = true
    },
    // 回复祝福
    postBottleChat() {
      const vm = this
      if (this.chatValue == '') {
        this.$showToast('内容不能为空')
        return
      }
      var data = {
        receiving_id: this.id,
        content: this.chatValue
      }
      clearTimeout(vm.setIntervalList)
      vm.chatValue = ''
      this.$post({
        url: `${service.bottleChat}`,
        data
      }, {
        success: ({
					code,
					data
				}) => {
          vm.setIntervalCatch()
          vm.getListNew(vm.list[0].id)
        }
      })
    },
    sendMessage (e) {
      this.chatValue = e.detail.value
    },
    choiceType(index) {
      this.compType.forEach((item, i) => {
        if (i == index) {
          item.choiceTips = !item.choiceTips
        }
      })
      this.$apply()
    },
    complaint() {
      this.modalName = 'complaintModal'
    },
    playMethod(e) {
      this.$invoke('backgroundAudio', 'endedVoice')
      if(this.playShow) {
        this.$invoke('backgroundAudio', 'listenRecord', {tempFilePath: e})
      }
      this.playShow = !this.playShow
    },
    gotoTv(item) {
      const that = this
      that.videoContext = wx.createVideoContext('video_' + item.id, this)
      that.videoContext.requestFullScreen()
      setTimeout(() => {
        that.videoContext.play()
      }, 300)
    },
    leaveVideo() {
      this.videoContext.pause()
    }
  }
  events = {
    'playEnded': (e) => {
      this.playShow = true
      this.$apply()
    },
    'recording': (e) => {
      this.recordingTimeqwe = e
    },
  }
}

</script>

<style lang="less">
@import "../../styles/custom/fn.less";
@import "../../styles/custom/wa-ui.less";
page {
  background: #f5f5f5;
  overflow: hidden;
  position: relative;
}
.m_tips {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 80rpx;
  background-color: #FFF8F2;
  z-index: 1000;
  padding: 0 30rpx;
  .report_icon {
    width: 100rpx;
    height: 40rpx;
  }
}
.m_chat_box {
  padding-bottom: 72px;
  box-sizing: border-box;
  .chat_box{
    height: auto;
    display: flex;
    flex-direction: column-reverse;
    box-sizing: border-box;
    padding: 90rpx 30rpx 20rpx 30rpx;
    .chat_time{
      padding-bottom: 40rpx;
    }
    .message-box{
      padding-bottom: 40rpx;
      .right-Avatar{
        float: right;
        width: 80rpx;
        height: 80rpx;
        border-radius: 50%;
      }
      .right-message{
        max-width: 72%;
        float: right;
        padding: 20rpx 24rpx;
        background: #FBB040;
        color: white;
        margin-right: 16rpx;
        border-radius: 32rpx 0 32rpx 32rpx;
        font-size: 28rpx;
        line-height: 40rpx;
        word-wrap: break-word;
      }
      .right-voice{
        max-width: 72%;
        float: right;
        padding: 20rpx 34rpx 20rpx 24rpx;
        background: #FBB040;
        color: white;
        margin-right: 16rpx;
        border-radius: 32rpx 0 32rpx 32rpx;
        font-size: 28rpx;
        line-height: 40rpx;
        word-wrap: break-word;
        .wifi-symbol {
            width: 50rpx;
            height: 50rpx;
            box-sizing: border-box;
            overflow: hidden;
            transform: rotate(-45deg);
            -ms-transform: rotate(-45deg);
            -moz-transform: rotate(-45deg);
            -webkit-transform: rotate(-45deg);
            -o-transform: rotate(-45deg);
        }
        .wifi-circle {
            border: 5rpx solid #333333;
            border-radius: 50%;
            position: absolute;
        }
        .first {
            width: 5rpx;
            height: 5rpx;
            background: #333333;
            top: 45rpx;
            left: 45rpx;
            overflow: hidden;
            z-index: 3;
        }
        .second {
            width: 25rpx;
            height: 25rpx;
            top: 35rpx;
            left: 35rpx;
            overflow: hidden;
            z-index: 2;
        }
        .third {
            width: 40rpx;
            height: 40rpx;
            top: 25rpx;
            left: 25rpx;
            overflow: hidden;
            z-index: 1;
        }
        .third.sel {
          animation: fadeInOut 1s infinite 0.4s;
        }
        .second.sel {
          animation: fadeInOut 1s infinite 0.2s;
        }
        @keyframes fadeInOut {
            0% {
                opacity: 0;
            }
            100% {
                opacity: 1;
            }
        }
      }
      .right-video {
        max-width: 72%;
        float: right;
        color: #333333;
        border-radius: 0 32rpx 32rpx 32rpx;
        margin-left: 16rpx;
        font-size: 28rpx;
        line-height: 40rpx;
        word-wrap: break-word;
        .u_video {
          width: 232rpx;
          height: 412rpx;
          border-radius: 30rpx;
        }
      }
      .left-Avatar{
        float: left;
        width: 80rpx;
        height: 80rpx;
        border-radius: 50%;
      }
      .left-message{
        max-width: 72%;
        float: left;
        padding: 20rpx 24rpx;
        color: #333333;
        background: white;
        border-radius: 0 32rpx 32rpx 32rpx;
        margin-left: 16rpx;
        font-size: 28rpx;
        line-height: 40rpx;
        word-wrap: break-word;
        .m_imgLst {
          .u_img_lst {
            max-width: 200rpx;
            max-height: 200rpx;
            border-radius: 20rpx;
          }
        }
      }
      .left-voice{
        max-width: 72%;
        float: left;
        padding: 20rpx 24rpx 20rpx 34rpx;
        color: #333333;
        background: white;
        border-radius: 0 32rpx 32rpx 32rpx;
        margin-left: 16rpx;
        font-size: 28rpx;
        line-height: 40rpx;
        word-wrap: break-word;
        .wifi-symbol {
            width: 50rpx;
            height: 50rpx;
            box-sizing: border-box;
            overflow: hidden;
            transform: rotate(135deg);
            -ms-transform: rotate(135deg);
            -moz-transform: rotate(135deg);
            -webkit-transform: rotate(135deg);
            -o-transform: rotate(135deg);
            position: relative;
        }
        .wifi-circle {
            border: 5rpx solid #333333;
            border-radius: 50%;
            position: absolute;
        }
        .first {
            width: 5rpx;
            height: 5rpx;
            background: #333333;
            top: 45rpx;
            left: 45rpx;
            overflow: hidden;
            z-index: 3;
        }
        .second {
            width: 25rpx;
            height: 25rpx;
            top: 35rpx;
            left: 35rpx;
            overflow: hidden;
            z-index: 2;
        }
        .third {
            width: 40rpx;
            height: 40rpx;
            top: 25rpx;
            left: 25rpx;
            overflow: hidden;
            z-index: 1;
        }
        .third.sel {
          animation: fadeInOut 1s infinite 0.4s;
        }
        .second.sel {
          animation: fadeInOut 1s infinite 0.2s;
        }
 
        @keyframes fadeInOut {
            0% {
                opacity: 0;
            }
            100% {
                opacity: 1;
            }
        }

      }
    }
    .left-video {
      max-width: 72%;
      float: left;
      color: #333333;
      border-radius: 0 32rpx 32rpx 32rpx;
      margin-left: 16rpx;
      font-size: 28rpx;
      line-height: 40rpx;
      word-wrap: break-word;
      .u_video {
        width: 232rpx;
        height: 412rpx;
        border-radius: 30rpx;
      }
    }
  }
}
.m_inp {
  width: 100%;
  position: fixed;
  bottom: 0;
  left: 0;
  .u_inp {
    padding: 0 30rpx;
    background: #f5f5f5;
    border-top: 2rpx solid #e8e8e8;
    padding: 28rpx 30rpx 52rpx;
    .u_field {
      flex: 1;
      border-radius: 8rpx;
      height: 72rpx;
      font-size: 32rpx;
      padding: 14rpx 22rpx;
      line-height: 44rpx;
      background: white;
    }
    .u_inp_bu {
      font-size: 32rpx;
      font-weight: bold;
      color: #fbb040;
      line-height: 44rpx;
      padding-left: 30rpx;
    }
  }
}
.m_comp_con {
		padding: 30rpx 0rpx 50rpx;
    position: relative;
    .u_comp_icon {
      width: 28rpx;
      height: 28rpx;
      position: absolute;
      top: 24rpx;
      right: 30rpx;
    }
		.m_comp_tt {
			padding: 0 30rpx;
		}
		.m_comp {
			padding: 0 10rpx 0 30rpx;
			margin-top: 30rpx;
			.m_comp_type {
				.u_comp_type {
					margin-top: 24rpx;
					line-height: 40rpx;
					background: #F8F8F8;
					border-radius: 34rpx;
					padding: 10rpx 24rpx;
					margin-right: 20rpx;
					color: #666666;
				}
				.u_comp_type.sel {
					color: #FBB040;
					background: #FFF8F2;
				}
			}
		}
		.m_texTarea {
			margin: 50rpx 30rpx 40rpx;
			background-color: #f5f5f5;
		}
		.u_ble_bu {
			width: 400rpx;
			height: 72rpx;
			background: linear-gradient(90deg, #FFCE84 0%, #FBB040 100%);
			border-radius: 36rpx;
			color: #994D2C;
		}
	}
  .perfect_data_box {
    position: relative;
    display: inline-block;
    vertical-align: middle;
    margin-left: auto;
    margin-right: auto;
    width: 600rpx;
    max-width: 100%;
    background-color: #ffffff;
    border-radius: 24rpx;
    overflow: hidden;
		.u_complaint {
			width: 60rpx;
			height: 60rpx;
			position: absolute;
			z-index: 22;
			top: 16rpx;
			right: 30rpx;
			display: flex;
			justify-content: center;
			align-items: center;
		}
  }
</style>
