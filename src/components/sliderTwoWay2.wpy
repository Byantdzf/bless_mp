<template>
  <view class='buyMian-slide1'>
    <view class='buyMian-slide-contain1'>
      <slider wx:if='{{!change21}}' style='width:{{slider1W1}}%;z-index:{{zIndexFlag1 == 1 ? 1 : 3}}' class='slider-left1' block-size="18" value="{{slider1Value1}}" min='{{min1}}' max='{{slider1Max1}}' backgroundColor='rgba(255, 83, 128, .8)' activeColor='#f5f5f5' bindchanging='changing1' catchtouchstart='changeStart1' bindchange='changed1' data-idx='3'></slider>
      <slider wx:if='{{!change1}}' style='width:{{slider2W1}}%;z-index:{{zIndexFlag1 == 2 ? 1:3}}' class='slider-right1' block-size="18" value="{{slider2Value1}}" min='{{slider2Min1}}' max='{{max1}}' backgroundColor='#f5f5f5' activeColor='rgba(255, 83, 128, .8)' bindchanging='changing1' catchtouchstart='changeStart1' bindchange='changed1' data-idx='4'></slider>

<!--      <view class="showContentBox1">-->
<!--        <view wx:if='{{!change21 && !closeToFlag1}}' class="show-min-content1" style="left:{{showContent11}}%"><text>{{slider1Value1}}</text></view>-->
<!--        <view wx:if='{{!change1 && !closeToFlag1}}' class="show-max-content1" style="left:{{showContent21}}%"><text>{{slider2Value1}}</text></view>-->
<!--        &lt;!&ndash; 若是需要调整合并数字的盒子宽度 需要减去一半的margin &ndash;&gt;-->
<!--        <view wx:if='{{closeToFlag1}}' class="show-merge-content1" style="left:{{closeToPosition1}}%"><text>{{slider1Value1}}{{slider2Value1}}</text></view>-->
<!--      </view>-->
    </view>
  </view>
</template>

<script>
import wepy from 'wepy'
import base from '../mixins/base'
import http from '../mixins/http'
import {service} from '../config'
export default class sliderTwoWay2 extends wepy.component {
  mixins = [base, http]
  props = {
    sliderData1: {
      type: Object,
      default: {},
      twoWay: true
    }
  }
  components = {
  }
  data = {
    getData1: true,
    change1: false, // 当两个slider在最右端重合时，将change设置为true，从而隐藏slider2，才能继续操作slider1
    change21: false, // 当两个slider在最左端重合时，将change2设置为true，从而隐藏slider1，才能继续操作slider2
    max1: 200, // 两个slider所能达到的最大值
    min1: 140,  // 两个slider所能取的最小值
    rate1: 60 / 100, // slider的最大最小值之差和100（或1000）之间的比率 即最大值-最小值/100
    slider1Max1: 200, // slider1的最大取值
    slider1Value1: 160, // slider1的值
    slider2Value1: 180, // slider2的值
    slider2Min1: 140, // slider2的最小取值
    slider1W1: 100, // slider1的宽度
    slider2W1: 0, // slider2的宽度
    showContent11: 0, // 左边滑块离左边的距离
    showContent21: 100, // 右边滑块离左边的距离
    zIndexFlag1: 1, // 控制层叠
    closeTo1: 20, // 靠近多少就合并数字 百分比
    closeToFlag1: false, // true时 合并数字
    closeToPosition1: 0// 合并数字的位置
  }

  watch = {
    sliderData1() {
      this.slider1Value1 = this.sliderData1.min_stature
      this.slider2Value1 = this.sliderData1.max_stature
      console.log(this.slider2Value1)
      if (this.getData1) {
        this.showContent11 = 100 - parseInt((this.max1 - this.slider1Value1) / this.rate1)
        this.showContent21 = 100 - parseInt((this.max1 - this.slider2Value1) / this.rate1)
        var dw = (this.max1 - this.slider1Value1) / this.rate1
        console.log(dw, '7987')
        this.slider2W1 = dw
        this.slider1W1 = 100 - dw
        this.slider1Max1 = this.slider1Value1
        this.slider2Min1 = this.slider1Value1
        this.zIndexFlag1 = 2
        this.change21 = false
        this.getData1 = false
        this.$apply()
      }
    }
  }

  onLoad() {
    this.slider1Value1 = 160
    this.slider2Value1 = 180
    this.showContent11 = 100 - parseInt((this.max1 - this.slider1Value1) / this.rate1)
    this.showContent21 = 100 - parseInt((this.max1 - this.slider2Value1) / this.rate1)
    var dw = (this.max1 - this.slider1Value1) / this.rate1
    console.log(dw, '7987')
    this.slider2W1 = dw
    this.slider1W1 = 100 - dw
    this.slider1Max1 = this.slider1Value1
    this.slider2Min1 = this.slider1Value1
    this.zIndexFlag1 = 2
    this.change21 = false
    this.$apply()
  }

  methods = {
    // 开始滑动
    changeStart1 (e) {
      var idx = parseInt(e.currentTarget.dataset.idx)
      if (this.data.slider1Value1 !== this.data.slider2Value1) {
        this.change1 = false
        this.change21 = false
      }
      if (idx === 3) {
        // dW是当前操作的slider所能占据的最大宽度百分数
        var dW = (this.data.slider2Value1 - this.data.min1) / this.data.rate1
        console.log(dW)
        this.slider1W1 = dW
        this.slider2W1 = 100 - dW
        this.slider1Max1 = this.data.slider2Value1
        this.slider2Min1 = this.data.slider2Value1
        this.zIndexFlag1 = 1
        this.change1 = false
      } else if (idx === 4) {
        var dw = (this.data.max1 - this.data.slider1Value1) / this.data.rate1
        console.log(dw)
        this.slider2W1 = dw
        this.slider1W1 = 100 - dw
        this.slider1Max1 = this.data.slider1Value1
        this.slider2Min1 = this.data.slider1Value1
        this.zIndexFlag1 = 2
        this.change21 = false
      }
    },

    // 正在滑动
    changing1 (e) {
      var idx = parseInt(e.currentTarget.dataset.idx)
      var value = e.detail.value
      if (idx === 3) {
        this.slider1Value1 = value
        this.showContent11 = 100 - parseInt((this.data.max1 - this.data.slider1Value1) / this.data.rate1)
      } else if (idx === 4) {
        this.slider2Value1 = value
        this.showContent21 = 100 - parseInt((this.data.max1 - this.data.slider2Value1) / this.data.rate1)
      }
      // 当两个数字相近时 数字合并 太靠近两边会取一个足够显示的位置 15 85
      // if (this.data.showContent2 - this.data.showContent1 < this.data.closeTo) {
      //   let p = this.data.showContent1 + ((this.data.showContent2 - this.data.showContent1) / 2)
      //   if (p > 85) {
      //     this.closeToFlag = true
      //     this.closeToPosition = 85
      //   } else if (p < 15) {
      //     this.closeToFlag = true
      //     this.closeToPosition = 15
      //   } else {
      //     this.closeToFlag = true
      //     this.closeToPosition = p
      //   }
      // } else {
      //   this.closeToFlag = false
      // }
      let myEventDetail = {
        slider1Value: this.slider1Value1,
        slider2Value: this.slider2Value1
      }
      this.$emit('compontpas2', myEventDetail)
    },

    changed1 (e) {
      let idx = parseInt(e.currentTarget.dataset.idx)
      if (idx === 3) {
        this.showContent11 = 100 - parseInt((this.data.max1 - this.data.slider1Value1) / this.data.rate1)
      } else if (idx === 4) {
        this.showContent21 = 100 - parseInt((this.data.max1 - this.data.slider2Value1) / this.data.rate1)
      }
      if (this.data.slider1Value1 === this.data.slider2Value1 && this.data.slider2Value1 === this.data.max1) {
        console.log(e)
        this.change1 = true
      }
      if (this.data.slider1Value1 === this.data.slider2Value1 && this.data.slider2Value1 === this.data.min1) {
        this.change21 = true
      }
    }
  }
}
</script>

<style lang="less" scoped>
@import "../styles/custom/fn.less";
.buyMian-slide1, .buyMian-title1 {
  width: 96%;
  margin: 0 auto;
}

.buyMian-title1 {
  font-size: 34rpx;
  color: #212121;
  line-height: 36rpx;
  margin-top: 45rpx;
}

.buyMian-slide-title1 {
  font-size: 36rpx;
  color: #ff7500;
  line-height: 38rpx;
  margin-top: 25rpx;
  text-align: center;
}

.buyMian-slide-slide1 {
  margin: 10rpx auto 0;
}

/* range */

.buyMian-slide-contain1 {
  width: 100%;
  display: flex;
  padding: 20px 0 10px;
  position: relative;
  /* left: -25rpx; */
  /* background: red; */
}
.slider-left1, .slider-right1 {
  /* margin-right: -8rpx; */
  margin: 0;
}

.showContentBox1{
  width: 100%;
  height: 36rpx;
  /* background: blue; */
  position: absolute;
  top: -6rpx;
  /* left: 8rpx; */
}
.show-max-content1,.show-min-content1{
  position: absolute;
  width: 40rpx;
  margin-left: -20rpx;
  display: flex;
  justify-content: center;
}
.show-max-content1{
  margin-right: -22rpx !important;
}
.show-min-content1 text{
  position: absolute;
  font-size: 26rpx;
  font-weight: bold;
  color: #f33b6c;
}
.show-max-content1 text{
  position: absolute;
  font-size: 26rpx;
  font-weight: bold;
  color: #f33b6c;
}
.show-merge-content1{
  position: absolute;
  width: 40%;
  display: flex;
  justify-content: center;
  margin-left: -20%;
}
.show-merge-content1 text{
  position: absolute;
  font-size: 26rpx;
  width: 100%;
  font-weight: bold;
  color: #f33b6c;
  display: flex;
  justify-content: center;
}
.flex1 {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  display: box;
  flex-wrap: wrap;
}
.flexSb1 {
  justify-content: space-between;
  -webkit-justify-content: space-between;
  -moz-justify-content: space-between;
  -ms-justify-content: space-between;
  -o-justify-content: space-between;
}
</style>
